---
description: 
globs: 
alwaysApply: true
---
Section 1: Global Conventions

#

Rule

MAIN - 

You will always be responsible for implementing code - theres never a reason to ask. If you have been provided a plan, execute on that plan until it is finished or there is a critical differentiation where clarity is needed.

1.1

MUST adopt Prettier + ESLint auto‑fix. Code left with lint errors or Prettier diffs is unacceptable.

1.2

MUST use PascalCase for React components and camelCase for variables/functions. File names must match exports.

1.3

MUST NOT leave TODO, commented‑out blocks, or boilerplate in committed code. Convert to GitHub Issues or remove.

1.4

SHOULD NOT allow functions or React components to exceed 50 logical lines. Extract helpers to src/lib/** or child components.

Section 2: Build, CI, and Quality

#

Rule

2.1

MUST ensure pnpm run build passes before every commit or PR.

2.2

MUST run pnpm lint and pnpm test in CI. CI must enforce: install → lint → test → build.

2.3

MUST reject any PR that fails lint, test, or build. Commits must not merge to main if CI fails.

Section 3: Component & Directory Structure

#

Rule

3.1

MUST place reusable UI in src/components/ui/.

3.2

MUST place domain-specific components (e.g. posts, collectives) in src/components/app/.

3.3

MUST colocate styles via Tailwind classes in the component. No standalone CSS files or style.module.css.

3.4

MUST use dashboard layout in /dashboard/** via dashboard/layout.tsx. Public pages use the root layout.

Section 4: Tailwind & Styling Rules

#

Rule

4.1

MUST NOT add tailwindcss to PostCSS directly. Use @tailwindcss/postcss + autoprefixer only.

4.2

MUST define design tokens as CSS variables under :root and .dark in src/app/globals.css. Use HSL format.

4.3

MUST theme Tailwind using hsl(var(--token) / <alpha-value>). No hex codes or raw HSL in components.

4.4

MUST use utility-first classes for all styling. Use class-variance-authority for variants.

4.5

MUST NOT use style={{...}}, except for computed dynamic values.

4.6

MUST NOT use CSS-in-JS or third-party UI kits. ShadCN, Chakra, MUI are banned.

4.7

MUST scope dark mode theming to .dark class (managed by next-themes).

4.8

MUST apply vertical rhythm and layout spacing via Tailwind spacing scale only (e.g. multiples of 4px or 8px).

Section 5: Typography & Layout

#

Rule

5.1

MUST use semantic heading tags (<h1>, <h2>, etc.) and Tailwind text sizes.

5.2

MUST use @tailwindcss/typography plugin (prose) for longform content (posts, newsletters).

5.3

SHOULD NOT hardcode pixel font sizes. Use theme-based typography scale.

5.4

MUST NOT use box shadows on Cards unless specified in design tokens.

Section 6: Dark Mode

#

Rule

6.1

MUST toggle dark mode via .dark class.

6.2

MUST style with bg-*, text-*, and token-based Tailwind classes that map to theme CSS variables.

6.3

MUST NOT use color logic or manual theme detection in components.

Section 7: Icons & Accessibility

#

Rule

7.1

MUST use lucide-react icons only. No other icon libraries.

7.2

MUST label all meaningful icons with aria-label or adjacent visible text.

7.3

MUST use .size-4 or w-4 h-4 to standardize icon size.

7.4

MUST use semantic HTML (<button>, <main>, <form>) and accessible components (roles, labels, etc.).

Section 8: Supabase & Stripe SDKs

#

Rule

8.1

MUST use @supabase/supabase-js (client) and @supabase/ssr (server/Edge).

8.2

MUST use Stripe official SDKs. Manual HMAC or custom webhook signing logic is banned.

8.3

MUST link all products, prices, and subscriptions via collective_id.

8.4

MUST validate stripe_price_id maps to a price that belongs to the correct collective.

Section 9: Data Model

#

Rule

9.1

collective_members must enforce unique (collective_id, user_id) index. Use ENUM role.

9.2

posts table must include ENUM status column (draft, active, removed) or equivalent soft-delete flag.

9.3

subscriptions must enforce consistency across target_entity_type, target_entity_id, and stripe_price_id → product.collective_id.

9.4

SHOULD add materialized views for common aggregates (post_like_count).

9.5

SHOULD index foreign keys: posts.collective_id, likes.post_id, follows.follower_id, subscriptions.user_id.

Section 10: Security

#

Rule

10.1

MUST restrict posts edit/delete to authors or collective editors via RLS.

10.2

MUST restrict collective_members role updates to owners only.

10.3

MUST validate all ENUM inputs server-side.

10.4

MUST NOT log or expose PII, secrets, or tokens.

Section 11: Performance

#

Rule

11.1

MUST use fetch with { next: { revalidate: N } } or Supabase’s cached() helper to avoid duplicate fetching.

11.2

SHOULD denormalize counts (e.g. like totals) into posts table or use materialized views.

11.3

MUST use Supabase storage or Vercel Blob for media. DB must only store references, not raw files.

Section 12: Testing & CI

#

Rule

12.1

MUST add Playwright e2e test covering: sign‑up → create collective → publish post.

12.2

MUST configure GitHub Actions: pnpm install, pnpm lint, pnpm test, pnpm build.

12.3

MUST block any PR that fails lint, test, or build from merging to main.