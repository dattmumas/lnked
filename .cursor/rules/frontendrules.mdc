---
description: 
globs: 
alwaysApply: true
---
---
description: "Lnked – Frontend styling and component rules for Cursor"
globs: ["src/**/*.{tsx,jsx,css,mdx}"]
alwaysApply: true
---
# cursor.frontend_rules.yml  
# **Lnked – Front-End Coding Rule Set**  
# ────────────────────────────────  
# All “MUST” rules are hard constraints; Cursor must not violate them.  
# “SHOULD” rules are strong recommendations; Cursor should follow them unless a clear reason is provided.

version: 1.1.0
rules:
  # ── Framework & Language ───────────────────────────────────────────
  - id: FE-001  
    level: MUST  
    description: "All code **MUST** use TypeScript and React (Next.js App Router)."

  - id: FE-002  
    level: MUST  
    description: "No alternative SPA/meta frameworks (Vue, Svelte, Remix, etc.) without explicit approval."

    - id: FE-003
    - level: MUST
    - 

  # ── Component Architecture ────────────────────────────────────────
  - id: FE-010  
    level: MUST  
    description: "Follow **Atomic Design** principles for components (atoms, molecules, organisms). Each component lives in its own file/folder matching this structure."

  - id: FE-011  
    level: MUST  
    description: "All interactive or headless UI components **MUST** build on Radix UI primitives for accessibility and logic, with all styling done via Tailwind CSS."

  - id: FE-012  
    level: SHOULD  
    description: "Prefer composition (children/slots) over deeply nested props or inheritance for extending component functionality."

  - id: FE-013  
    level: MUST  
    description: "Name files and components clearly and consistently. React components **MUST** use PascalCase names (e.g. `MyComponent.tsx` for `function MyComponent`). Folders should mirror the component structure (e.g. `src/components/ui/atoms/Button.tsx`). Utility modules in `src/lib` use camelCase file names matching their exported function."

  # ── Styling & Theming ─────────────────────────────────────────────
  - id: FE-020  
    level: MUST  
    description: "Use Tailwind CSS utility classes (or `@apply` in CSS) for all styling. Hard-coded hex colors, pixels, or arbitrary inline styles **MUST NOT** be used (except within Tailwind `[ ]` arbitrary value syntax when absolutely necessary)."

  - id: FE-021  
    level: MUST  
    description: "Use design tokens via CSS variables for all colors and theming. For example, use classes like `bg-primary` or `text-foreground` (which map to CSS variables) instead of raw color codes. This ensures theming can be toggled by changing CSS variable values."

  - id: FE-022  
    level: MUST  
    description: "Implement dark mode parity. Any new component or page **MUST** support both light and dark themes (using Tailwind `dark:` variants or CSS variable swaps under the `.dark` theme class). No visual element should be light-mode only."

  - id: FE-023  
    level: MUST  
    description: "Ensure **accessible color contrast** and focus indicators. All text and UI elements **MUST** meet at least WCAG AA contrast ratios against their background for readability. Interactive elements **MUST** have a visible focus state (e.g. focus ring or outline) for keyboard navigation."

  - id: FE-024  
    level: MUST  
    description: "Use semantic HTML and ARIA attributes for accessibility. Interactive controls **MUST** use appropriate elements (`<button>`, `<a>`, etc.) or have equivalent `role` and `aria-label` so that assistive technology can identify them. Icons used as sole content in buttons **MUST** have an `aria-label` or adjacent screen-reader-only text."

  - id: FE-025  
    level: MUST  
    description: "Design **responsively** for all screen sizes. Use Tailwind’s responsive utilities (`sm:`, `md:`, `lg:`, etc.) to adjust layouts on different breakpoints. Layouts **MUST** be mobile-friendly (no horizontal overflow or fixed-width elements that break on small screens) and scale up gracefully to large displays."

  - id: FE-026  
    level: SHOULD  
    description: "Feed and content pages **SHOULD** use a minimalist layout focusing on content. Emphasize typography and whitespace with minimal UI chrome (inspired by Substack/NYTimes style). Avoid unnecessary borders or heavy widgets around content – the text is the primary focus."

  - id: FE-027  
    level: SHOULD  
    description: "Dashboard and management pages **SHOULD** favor information density in design. Use compact tables, lists, and controls to maximize data shown (inspired by Linear’s UI). These pages can use tighter spacing and smaller font sizes than content pages, while still maintaining clarity and usability."

  - id: FE-028  
    level: MUST  
    description: "Use a consistent spacing scale and **vertical rhythm** across the app. All margins, padding, and gaps **MUST** come from the standardized Tailwind spacing scale (as configured in the theme). Do not use arbitrary pixel values that aren’t in the design token scale. This maintains a cohesive, grid-aligned layout (e.g. multiples of 4px or 8px for spacing)."

  - id: FE-029  
    level: SHOULD  
    description: "Use the standardized icon set for all icons (Lucide icons via `lucide-react`). Icons **SHOULD** be sized using utility classes (e.g. use the predefined `.size-*` utilities or Tailwind width/height classes) to match the surrounding text. Ensure icons that convey meaning have accessible labels (per FE-024) and purely decorative icons have `aria-hidden` set."

  # ── UI Components & Consistency ───────────────────────────────────
  - id: FE-030  
    level: MUST  
    description: "Do not introduce external UI component libraries (no ShadCN UI, Material UI, Chakra, etc.). Use **only** the custom Lnked UI components (in `src/components/ui`) and Tailwind styling. The design system is self-contained; adding a new third-party UI kit or duplicating an existing component is prohibited."

  - id: FE-031  
    level: MUST  
    description: "Extend and theme components through defined variant patterns rather than duplicating code. Use utility classes and variant APIs (e.g. `class-variance-authority` or similar) to handle component size, color, or style variants. Do not create separate components for what should be a variant of an existing component."

  - id: FE-032  
    level: SHOULD  
    description: "Adhere to the project typography scale and styles. Use heading elements (`<h1>...<h6>`) and Tailwind font-size utilities as configured (see Tailwind theme). Avoid defining custom font sizes or weights outside the theme tokens. Consistent typography ensures a professional, readable look."

  # ── State, Data, Realtime ─────────────────────────────────────────
  - id: FE-040  
    level: MUST  
    description: "Default to **server-side** data fetching. Use Next.js Server Components or Route Handlers for data operations instead of heavy client-side `useEffect` fetching. This keeps the app fast and SEO-friendly."

  - id: FE-041  
    level: SHOULD  
    description: "Keep global client state to a minimum. Use React Context only for truly global concerns like auth or theme. For server data caching, prefer React Query/SWR or similar rather than a ton of local `useState`."

  - id: FE-042  
    level: MUST  
    description: "Use Supabase Realtime for live updates instead of polling. All realtime updates should go through a single Supabase channel or similar. Polling the backend in loops is not allowed when push-based updates are available."

  # ── Forms & Validation ────────────────────────────────────────────
  - id: FE-050  
    level: MUST  
    description: "Use React Hook Form with Zod (or equivalent schema) for **all** forms. Form input validation must be schema-based and integrate with RHF for consistent error handling."

  - id: FE-051  
    level: MUST  
    description: "Provide user feedback for form submissions. On validation errors or successful actions, show inline messages or toast notifications via the designated UI components (e.g. an Alert/Toast component in our system). Do not silently fail or succeed without user acknowledgment."

  # ── Media & Performance ───────────────────────────────────────────
  - id: FE-060  
    level: MUST  
    description: "Lazy-load large or optional modules (editors, media players, etc.). Use dynamic `import()` or React.lazy with suspense fallback for heavy components so they don’t bloat initial bundles."

  - id: FE-061  
    level: MUST  
    description: "Use Next.js `<Image>` for all images to ensure optimized loading and responsive sizing. Every image should have defined `width`/`height` or `fill` and use the built-in optimization unless there's a compelling reason not to."

  - id: FE-062  
    level: SHOULD  
    description: "Virtualize long lists. For content feeds or lists over ~100 items, use a windowing technique (`react-window`, `react-virtualized`, etc.) to avoid rendering too many DOM nodes at once."

  # ── Security & Access Control ─────────────────────────────────────
  - id: FE-070  
    level: MUST  
    description: "Protect authenticated routes. The `/dashboard/**` pages and any auth-required routes **MUST** be gated by Next.js middleware (and corresponding server-side checks) to prevent unauthorized access."

  - id: FE-071  
    level: MUST  
    description: "Enforce role-based UI. Buttons or links for actions that require certain roles/permissions **MUST** only render if the user has proper access (in addition to backend RLS enforcement). Do not rely on frontend enforcement alone, but the UI should mirror what actions are available."

  - id: FE-072  
    level: MUST  
    description: "Do not expose secrets or sensitive data in client-side code. API keys, secret tokens, or personal user data should never be hard-coded or included in client bundles. Fetch sensitive info server-side when needed."

  # ── Package & Tooling ─────────────────────────────────────────────
  - id: FE-080  
    level: MUST  
    description: "Keep the code linted and formatted. ESLint and Prettier must pass (run `npm run lint`/`fix` before commit). No PR should introduce lint errors or stylistic inconsistencies."

  - id: FE-081  
    level: SHOULD  
    description: "Stay up-to-date with frameworks. The project should be kept within two minor versions of the latest Next.js, React, and Supabase releases, unless there is a known breaking change. Regularly upgrade dependencies to avoid security and maintenance issues."

  # ── Testing & CI ─────────────────────────────────────────────────
  - id: FE-090  
    level: SHOULD  
    description: "Provide basic end-to-end tests for critical flows (auth, creating a post, subscribing to a newsletter, etc.) using a tool like Playwright. Key user journeys should be covered by automated tests in CI."

  # ── Future-Proofing & Extensibility ──────────────────────────────
  - id: FE-100  
    level: SHOULD  
    description: "Use CSS variables for theme tokens to enable theming and white-labeling. The design should be easily adjustable by swapping out color palettes or fonts via variables (for example, collective-specific themes or whitelabel reskinning in the future)."

  - id: FE-101  
    level: SHOULD  
    description: "Abstract shared logic into reusable modules. If certain validation, state management, or UI patterns will be reused on mobile or other platforms, put them in `src/lib` or a SDK package so they can be shared."

    # ── Tailwind CSS – Hard-Stop Rules ─────────────────────────────────────────
# All “MUST” items block CI; “SHOULD” items warn.

version: 1.0.0
rules:
  - id: TW-001
    level: MUST
    description: |
      Tailwind dependency version must remain at 3.x until a tracked
      migration task explicitly upgrades the design-system to v4+.
      • package.json must declare "tailwindcss": "^3."
      • pnpm-lock or package-lock must not contain tailwindcss@4.
      Rationale: v4 removes color-only utilities & the bundled CLI.

  - id: TW-002
    level: MUST
    description: |
      postcss.config.* must list `tailwindcss: {}` (not "@tailwindcss/postcss").
      If a future v4+ upgrade is approved, rule TW-001 will be updated and
      this check will be relaxed accordingly.

  - id: TW-003
    level: MUST
    description: |
      `.bin/tailwindcss` CLI must exist after `pnpm install`.
      CI step: `test -x node_modules/.bin/tailwindcss`.
      Prevents builds that silently miss the CLI when package layout changes.

  - id: TW-010
    level: MUST
    description: |
      No `@apply` calls may invoke *color-only* utilities
      (border-*, outline-*, ring-*/opacity, text-* etc.) unless paired with
      their required base property.  
      Example:  
        ✅ `@apply border border-border;`  
        ❌ `@apply border-border;`
      CI check: run `pnpm dlx @lnked/style-audit color-only-apply`.

  - id: TW-011
    level: MUST
    description: |
      Any new design-token utility (bg-*, text-*, border-*, ring-*)
      **must** be referenced in at least one file matched by
      tailwind.config.content OR be added to tailwind.config.safelist.
      Prevents purge from stripping utilities later used via @apply.

  - id: TW-020
    level: SHOULD
    description: |
      When adding custom top-level colours in tailwind.config, use string
      literals (`foreground: "#222"`) instead of object shorthand unless
      you actually need a scale. Avoids accidental loss of simple utilities
      in future v4 migration.

  - id: TW-030
    level: MUST
    description: |
      `pnpm run lint && pnpm run build` must be executed in CI for every PR.
      Build errors like “unknown utility class” abort the pipeline.

meta:
  owner: "Frontend Platform"
  last_updated: "2025-05-18"

meta:
  owner: "Lnked Engineering"
  last_updated: "2025-05-17"
